#if !defined(_MANTIS_)
#  define _MANTIS_

class model_data : public ad_comm{
  data_int start_mo;
  data_int end_mo;
  data_int size_n;
  data_vector sizes;
  data_int surv_dat_mo;
  data_ivector surv_months;
  data_vector surv_obs_n;
  data_matrix surv_size_comp_obs;
  data_int cat_dat_mo;
  data_ivector cat_months;
  data_vector cat_obs_n;
  data_matrix cat_size_comp_obs;
  data_int rec_n;
  data_ivector rec_month;
  data_int growth_n;
  data_ivector grow_month;
  data_number catch_cv;
  data_number surv_cv;
  data_number catch_eff_n;
  data_number surv_eff_n;
  int ipass;
  int proj_n;
  ~model_data();
  model_data(int argc,char * argv[]);
  friend class model_parameters;
};

class model_parameters : public model_data ,
  public function_minimizer
{
public:
  ~model_parameters();
  void preliminary_calculations(void);
  void set_runtime(void);
  static int mc_phase(void)
  {
    return initial_params::mc_phase;
  }
  static int mceval_phase(void)
  {
    return initial_params::mceval_phase;
  }
  static int hessian_phase(void)
  {
    return initial_params::in_hessian_phase;
  }
  static int sd_phase(void)
  {
    return initial_params::sd_phase;
  }
  static int current_phase(void)
  {
    return initial_params::current_phase;
  }
  static int last_phase(void)
  {
    return (initial_params::current_phase
      >=initial_params::max_number_phases);
  }
  static prevariable current_feval(void)
  {
    return *objective_function_value::pobjfun;
  }
private:
  dvariable adromb(dvariable(model_parameters::*f)(const dvariable&), double a, double b, int ns)
  {
    using namespace std::placeholders;
    _func func = std::bind(f, this, _1);
    return function_minimizer::adromb(func, a, b, ns);
  }
  ivector integer_control_flags;
  dvector double_control_flags;
  param_init_bounded_vector log_n_at_l_init;
  param_init_bounded_vector log_recruits;
  param_init_bounded_number nat_m;
  param_init_bounded_number surv_q;
  param_init_bounded_number surv_50;
  param_init_bounded_number surv_slope;
  param_init_bounded_number fish_50;
  param_init_bounded_number fish_slope;
  param_init_bounded_vector f_mort;
  param_init_bounded_number growth_alpha;
  param_init_bounded_number growth_beta;
  param_init_bounded_number growth_slope;
  param_number prior_function_value;
  param_number likelihood_function_value;
  objective_function_value f;
  param_matrix n_at_len;
  param_vector surv_pred;
  param_matrix surv_size_comp_pred;
  param_vector catch_pred;
  param_matrix catch_size_comp_pred;
  param_matrix pred_c_at_len;
  param_vector fish_sel;
  param_vector surv_sel;
  param_vector post_molt_size;
  param_matrix size_trans_matrix;
  param_matrix applied_f;
  param_vector add_recruits;
  param_vector mean_length;
  param_number catch_like;
  param_number surv_like;
  param_number catch_size_comp_like;
  param_number surv_size_comp_like;
  param_number survey_sel_smooth;
  param_number rec_smooth;
  param_number init_smooth;
  param_number f_smooth;
public:
  virtual void userfunction(void);
  virtual void report(const dvector& gradients);
  virtual void final_calcs(void);
  model_parameters(int sz,int argc, char * argv[]);
  virtual void initializationfunction(void){}
  void get_num_at_len(void);
  void get_num_at_len_yr(void);
  void evaluate_the_objective_function(void);

};
#endif
